@model FakeStore2.ViewModel.OrdersViewModel

@{
    ViewBag.Title = "Orders";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag.Title</h2>
<br />
<div class="form-group">
    @Html.LabelFor(cn => cn.Costumers)
    @Html.DropDownListFor(cn => cn.Costumers, new SelectList(Model.Costumers, "CostumerId", "FirstName"), "All Costumers", new { @class = "form-control", id = "customerDropdown" })
</div>

<br />
<div>
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>@Html.LabelFor(ovm => ovm.Orders.FirstOrDefault().OrderDate)</th>
                <th>@Html.LabelFor(ovm => ovm.Orders.FirstOrDefault().Total)</th>
                <th>@Html.LabelFor(ovm => ovm.Costumers.FirstOrDefault().FirstName)</th>
                <th></th>
            </tr>
        </thead>
        <tbody class="js-costumer-table-body">
            <!--Table body dynamically rendered-->
        </tbody>
    </table>
</div>

<!--Pagination-->
<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1">Previous</a>
        </li>
        <li class="page-item"><a class="page-link" href="#">1</a></li>
        <li class="page-item"><a class="page-link" href="#">2</a></li>
        <li class="page-item"><a class="page-link" href="#">3</a></li>
        <li class="page-item">
            <a class="page-link" href="#">Next</a>
        </li>
    </ul>
</nav>

<br />
<a>
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-success" })
</a>

@section scripts{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dropdownList = document.querySelector('#customerDropdown');
            const jsTable = document.querySelector('.js-costumer-table-body');
            let startRow = 0;
            let amountOfRows = 10;

            let url = "https://localhost:44372/api/orders";

            //fetch function
            const fetchOrders = async (url) => {
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    return data;

                } catch (err) {
                    throw err;
                }
            };

            //tableContents render function
            let tableContents = (obj) => {
                let result = obj.map(item => {
                    return `<tr>
                                <td>${item.OrderDate}</td>
                                <td>$${item.Total}</td>
                                <td>${item.CostumerName}</td>
                                <td>
                                    <a href='https://localhost:44372/Orders/Edit/${item.OrderId}' alt="Edit">Edit</a> |
                                    <a href='https://localhost:44372/Orders/Details/${item.OrderId}' alt="details">Details</> |
                                    <a href='https://localhost:44372/Orders/Delete/${item.OrderId}' alt="Delete">Delete</a>
                                </td>
                            </tr>`;
                }).join("");
                return result;
            };

            //call fetchOrders without id to get all orders as soon as DOM loads
            fetchOrders(`${url}?startRow=${startRow}&amountOfRows=${amountOfRows}`).then(data => {
                jsTable.innerHTML = tableContents(data);

                //then fetch orders of individual customer onchange
                dropdownList.addEventListener("change", function () {

                    fetchOrders(`${url}/${dropdownList.value}`).then(data => {
                        console.log(data)
                        jsTable.innerHTML = data.length > 0 ? tableContents(data) : "<br/><p class='text-center'>Costumer hasn't placed any orders yet.</p>";
                    })
                });
            });
        });
    </script>
}